name: Build, Test and Push Docker Images

on:
  push:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: secure-docs
        ports:
          - 5432:5432
      redis:
        image: redis:8.0-alpine
        ports:
          - 6379:6379
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"

      - name: Install backend dependencies
        run: npm install
        working-directory: ./back

      - name: Apply Prisma migrations
        run: npx prisma migrate dev --name init
        working-directory: ./back
        env:
          DATABASE_URL: "postgresql://postgres:postgres@localhost:5432/secure-docs?schema=public"

      - name: Build backend
        run: npm run build
        working-directory: ./back

      - name: Run Jest tests
        run: npm run test
        working-directory: ./back

      - name: Start backend
        run: npm run start:prod &
        working-directory: ./back
        env:
          DATABASE_URL: "postgresql://postgres:postgres@localhost:5432/secure-docs?schema=public"
          REDIS_URL: "redis://localhost:6379"
          JWT_SECRET: "supersecretjwt"
          AZURE_BLOB_STORAGE: "DefaultEndpointsProtocol=https;AccountName=fakeaccount;AccountKey=fakekey;EndpointSuffix=core.windows.net"

      - name: Install Newman
        run: npm install -g newman

      - name: Run Newman tests
        run: newman run test/secure-docs.postman_collection.json
        working-directory: ./back

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    environment: githubaction
    strategy:
      matrix:
        service: [back, front, worker]
        include:
          - service: back
            build_path: back
            image_name: my-backend
            dockerfile: Dockerfile
          - service: front
            build_path: front
            image_name: my-frontend
            dockerfile: Dockerfile
          - service: worker
            image_name: my-worker
            build_path: back
            dockerfile: Dockerfile.worker

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get commit hash
        id: vars
        run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.USERNAME }}
          password: ${{ secrets.PASSWORD }}

      - name: Build and tag Docker image
        run: |
          cd ${{ matrix.build_path }}
          docker build -f ${{ matrix.dockerfile }} -t ${{ secrets.USERNAME }}/${{ matrix.image_name }}:latest \
                       -t ${{ secrets.USERNAME }}/${{ matrix.image_name }}:${{ steps.vars.outputs.sha_short }} .

      - name: Push Docker images
        run: |
          docker push ${{ secrets.USERNAME }}/${{ matrix.image_name }}:latest
          docker push ${{ secrets.USERNAME }}/${{ matrix.image_name }}:${{ steps.vars.outputs.sha_short }}

      - name: Trigger Render deploy via API
        env:
          RENDER_SERVICE_ID_BACKEND: srv-d1a0p495pdvs73aaslr0
          RENDER_SERVICE_ID_WORKER: srv-d1bdje2dbo4c73cdv69g
          RENDER_API_TOKEN: ${{ secrets.RENDER_API_TOKEN }}
        run: |
          echo "Triggering backend deploy..."
          curl -X POST "https://api.render.com/v1/services/${RENDER_SERVICE_ID_BACKEND}/deploys" \
              -H "Authorization: Bearer ${RENDER_API_TOKEN}" \
              -H "Accept: application/json"
          echo "Triggering worker deploy..."
          curl -X POST "https://api.render.com/v1/services/${RENDER_SERVICE_ID_WORKER}/deploys" \
              -H "Authorization: Bearer ${RENDER_API_TOKEN}" \
              -H "Accept: application/json"
